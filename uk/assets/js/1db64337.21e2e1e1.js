"use strict";(self.webpackChunkunwrap_or_docs=self.webpackChunkunwrap_or_docs||[]).push([[413],{1818:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"overview","title":"Overview","description":"It is a TypeScript implementation of Rust\'s Option and Result types.","source":"@site/docs/overview.md","sourceDirName":".","slug":"/","permalink":"/unwrap-or/uk/","draft":false,"unlisted":false,"editUrl":"https://github.com/hnatiukr/unwrap-or/docs/docs/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"slug":"/","title":"Overview","id":"overview","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Module","permalink":"/unwrap-or/uk/option"}}');var i=r(5105),t=r(3126);const o={slug:"/",title:"Overview",id:"overview",sidebar_position:1},a=void 0,l={},d=[{value:"Installation",id:"installation",level:2},{value:"Modules",id:"modules",level:2},{value:"Option",id:"option",level:3},{value:"Basic usages",id:"basic-usages",level:4},{value:"Result",id:"result",level:3},{value:"Basic usages",id:"basic-usages-1",level:4},{value:"Inspirations",id:"inspirations",level:2},{value:"License",id:"license",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"It is a TypeScript implementation of Rust's Option and Result types."}),"\n",(0,i.jsxs)(n.p,{children:["It is a playground library that closely mirrors ",(0,i.jsx)(n.strong,{children:"Rust"}),"'s ",(0,i.jsx)(n.a,{href:"https://doc.rust-lang.org/std/option/enum.Option.html",children:"Option"})," and ",(0,i.jsx)(n.a,{href:"https://doc.rust-lang.org/std/result/enum.Result.html",children:"Result"})," API. While created primarily for fun and learning, it's robust enough for real-world applications. It allows for safer, more expressive handling of optional values through a monadic interface. Snake_case is used for the plausibility of the original."]}),"\n",(0,i.jsxs)(n.p,{children:["The name ",(0,i.jsx)(n.code,{children:"unwrap-or"})," is a playful reference to both the ",(0,i.jsx)(n.code,{children:"unwrap_or"})," method found in the ",(0,i.jsx)(n.code,{children:"Option"}),"/",(0,i.jsx)(n.code,{children:"Result"})," types, and a hint at the package's contents - ",(0,i.jsx)(n.em,{children:'"-OR"'})," standing for ",(0,i.jsx)(n.strong,{children:"O"}),"ption and ",(0,i.jsx)(n.strong,{children:"R"}),"esult types. It also cleverly references the logical ",(0,i.jsx)(n.code,{children:"OR"})," operation, reflecting how these monadic types encapsulate one of two possible states - either ",(0,i.jsx)(n.code,{children:"Some"})," or ",(0,i.jsx)(n.code,{children:"None"})," for ",(0,i.jsx)(n.code,{children:"Option"}),"; either ",(0,i.jsx)(n.code,{children:"Ok"})," or ",(0,i.jsx)(n.code,{children:"Err"})," for ",(0,i.jsx)(n.code,{children:"Result"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"Via npm:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npm install unwrap-or\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also use your favorite package manager:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"# pnpm\npnpm add unwrap-or\n\n# bun\nbun add unwrap-or\n\n# yarn\nyarn add unwrap-or\n\n# deno\ndeno add npm:unwrap-or\n"})}),"\n",(0,i.jsx)(n.h2,{id:"modules",children:"Modules"}),"\n",(0,i.jsxs)(n.p,{children:["JavaScript/TypeScript use ",(0,i.jsx)(n.code,{children:"null"})," or ",(0,i.jsx)(n.code,{children:"undefined"})," types to represent empty outputs, and exceptions to handle errors. Instead, there are two special generic variants - ",(0,i.jsx)(n.code,{children:"Option"})," and ",(0,i.jsx)(n.code,{children:"Result"})," could be used to deal with above cases."]}),"\n",(0,i.jsx)(n.h3,{id:"option",children:"Option"}),"\n",(0,i.jsx)(n.p,{children:"Optional values."}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"Option"})," represents an optional value: every ",(0,i.jsx)(n.code,{children:"Option"})," is either ",(0,i.jsx)(n.code,{children:"Some"})," and contains a value, or ",(0,i.jsx)(n.code,{children:"None"}),", and does not."]}),"\n",(0,i.jsx)(n.h4,{id:"basic-usages",children:"Basic usages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { type Option, Some, None } from "unwrap-or/option";\n'})}),"\n",(0,i.jsx)(n.p,{children:"When writing a function or data type:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"if an argument of the function is optional"}),"\n",(0,i.jsx)(n.li,{children:"if the function is non-void and if the output it returns can be empty"}),"\n",(0,i.jsx)(n.li,{children:"if the value of a property of the data type can be empty"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"interface Bio {\n  name: string;\n  middle_name: Option<string>;\n  last_name: string;\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function divide(numerator: number, denominator: number): Option<number> {\n  return denominator === 0 ? Some(numerator / denominator) : None;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/option",children:"module level documentation"})," for more."]}),"\n",(0,i.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,i.jsxs)(n.p,{children:["Error handling with the ",(0,i.jsx)(n.code,{children:"Result"})," type."]}),"\n",(0,i.jsxs)(n.p,{children:["Type ",(0,i.jsx)(n.code,{children:"Result"})," is used for returning and propagating errors: every ",(0,i.jsx)(n.code,{children:"Result"})," is either ",(0,i.jsx)(n.code,{children:"Ok"})," - representing success and containing a value, or ",(0,i.jsx)(n.code,{children:"Err"})," - representing error and containing an error value."]}),"\n",(0,i.jsx)(n.h4,{id:"basic-usages-1",children:"Basic usages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { type Result, Ok, Err } from "unwrap-or/result";\n'})}),"\n",(0,i.jsx)(n.p,{children:"If a function can produce an error, by combining the data type of the valid output and the data type of the error."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"functuion invariant(predicate: boolean, message: string): Result<boolean, message> {\n  return predicate ? Ok(predicate) : Err(message);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.a,{href:"/result",children:"module level documentation"})," for more."]}),"\n",(0,i.jsx)(n.h2,{id:"inspirations",children:"Inspirations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/drizzer14/fnts",children:"fnts"})," - minimal functional programming utilities for TypeScript & JavaScript inspired by the programming language Haskell."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/hnatiukr/ts-expression",children:"ts-expression"})," - pair constructor, binary representation, a minimal implementation of ",(0,i.jsx)(n.code,{children:"Lisp"}),"'s symbolic expressions (",(0,i.jsx)(n.code,{children:"s-expressions"}),") for TypeScript."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsx)(n.p,{children:"Made by a human being, not LLM."}),"\n",(0,i.jsx)(n.p,{children:"Copyright \xa9 2025 Roman Hnatiuk"}),"\n",(0,i.jsxs)(n.p,{children:["Licensed under ",(0,i.jsx)(n.a,{href:"https://github.com/hnatiukr/unwrap-or/blob/main/LICENSE",children:"MIT"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3126:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(8101);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);