"use strict";(self.webpackChunkunwrap_or_docs=self.webpackChunkunwrap_or_docs||[]).push([[174],{3126:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var l=s(8101);const a={},i=l.createContext(a);function r(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),l.createElement(i.Provider,{value:n},e.children)}},9014:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>x,frontMatter:()=>r,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"option/methods","title":"API","description":"The Option type.","source":"@site/docs/option/api.md","sourceDirName":"option","slug":"/option/methods","permalink":"/unwrap-or/uk/option/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hnatiukr/unwrap-or/docs/docs/option/api.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"methods","slug":"methods","title":"API","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Module","permalink":"/unwrap-or/uk/option"},"next":{"title":"Module","permalink":"/unwrap-or/uk/result"}}');var a=s(5105),i=s(3126);const r={id:"methods",slug:"methods",title:"API",sidebar_position:2},o=void 0,t={},d=[{value:"Variants",id:"variants",level:2},{value:"Some",id:"some",level:3},{value:"Examples",id:"examples",level:4},{value:"None",id:"none",level:3},{value:"Examples",id:"examples-1",level:4},{value:"Implementations",id:"implementations",level:2},{value:"and",id:"and",level:3},{value:"Examples",id:"examples-2",level:4},{value:"and_then",id:"and_then",level:3},{value:"Examples",id:"examples-3",level:4},{value:"expect",id:"expect",level:3},{value:"Examples",id:"examples-4",level:4},{value:"filter",id:"filter",level:3},{value:"Examples",id:"examples-5",level:4},{value:"flatten",id:"flatten",level:3},{value:"Examples",id:"examples-6",level:4},{value:"inspect",id:"inspect",level:3},{value:"Examples",id:"examples-7",level:4},{value:"is_none",id:"is_none",level:3},{value:"Examples",id:"examples-8",level:4},{value:"is_none_or",id:"is_none_or",level:3},{value:"Examples",id:"examples-9",level:4},{value:"is_some",id:"is_some",level:3},{value:"Examples",id:"examples-10",level:4},{value:"is_some_and",id:"is_some_and",level:3},{value:"Examples",id:"examples-11",level:4},{value:"map",id:"map",level:3},{value:"Examples",id:"examples-12",level:4},{value:"map_or",id:"map_or",level:3},{value:"Examples",id:"examples-13",level:4},{value:"map_or_else",id:"map_or_else",level:3},{value:"Examples",id:"examples-14",level:4},{value:"or",id:"or",level:3},{value:"Examples",id:"examples-15",level:4},{value:"or_else",id:"or_else",level:3},{value:"Examples",id:"examples-16",level:4},{value:"unwrap",id:"unwrap",level:3},{value:"Examples",id:"examples-17",level:4},{value:"unwrap_or",id:"unwrap_or",level:3},{value:"Examples",id:"examples-18",level:4},{value:"unwrap_or_else",id:"unwrap_or_else",level:3},{value:"Examples",id:"examples-19",level:4},{value:"xor",id:"xor",level:3},{value:"Examples",id:"examples-20",level:4}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Option"})," type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Option<T> {\n    None,\n    Some(T),\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Option"})," type."]}),"\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"/option",children:"module level documentation"})," for more."]}),"\n",(0,a.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,a.jsx)(n.h3,{id:"some",children:"Some"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"Some<T>;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Some value of type ",(0,a.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number> = Some(42);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"none",children:"None"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"None;\n"})}),"\n",(0,a.jsx)(n.p,{children:"No value."}),"\n",(0,a.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number> = None;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,a.jsx)(n.h3,{id:"and",children:"and"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public and<U>(optb: Option<U>): Option<T | U>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"None"})," if the option is ",(0,a.jsx)(n.code,{children:"None"}),", otherwise returns ",(0,a.jsx)(n.code,{children:"optb"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Arguments passed to and are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,a.jsx)(n.code,{children:"and_then"}),", which is lazily evaluated."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<number>;\nlet y: Option<string>;\n\nx = Some(2);\ny = None;\nassert_eq!(x.and(y), None);\n\nx = None;\ny = Some("foo");\nassert_eq!(x.and(y), None);\n\nx = Some(2);\ny = Some("foo");\nassert_eq!(x.and(y), Some("foo"));\n\nx = None;\ny = None;\nassert_eq!(x.and(y), None);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"and_then",children:"and_then"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public and_then<U>(f: (value: T) => Option<U>): Option<T | U>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"None"})," if the option is ",(0,a.jsx)(n.code,{children:"None"}),",\notherwise calls function ",(0,a.jsx)(n.code,{children:"f"})," with the wrapped value and returns the result."]}),"\n",(0,a.jsxs)(n.p,{children:["Often used to chain fallible operations that may return ",(0,a.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Some languages call this operation ",(0,a.jsx)(n.code,{children:"flatmap"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\nlet y: Option<string>;\n\nx = Some("some value");\ny = None;\nassert_eq!(\n  x.and_then(() => y),\n  None,\n);\n\nx = None;\ny = Some("then value");\nassert_eq!(\n  x.and_then(() => y),\n  None,\n);\n\nx = Some("some value");\ny = Some("then value");\nassert_eq!(\n  x.and_then(() => y),\n  Some("then value"),\n);\n\nx = None;\ny = None;\nassert_eq!(\n  x.and_then(() => y),\n  None,\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"expect",children:"expect"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public expect(msg: string): T\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the contained ",(0,a.jsx)(n.code,{children:"Some"})," value."]}),"\n",(0,a.jsxs)(n.p,{children:["Recommend that expect messages are used to describe\nthe reason you expect the ",(0,a.jsx)(n.code,{children:"Option"})," should be ",(0,a.jsx)(n.code,{children:"Some"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Throws an error if the value is a ",(0,a.jsx)(n.code,{children:"None"}),"\nwith a custom message provided by ",(0,a.jsx)(n.code,{children:"msg"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\n\nx = Some("value");\nassert_eq!(x.expect("should return string value"), "value");\n\nx = None;\nassert_err!(\n  () => x.expect("should return string value"),\n  Error,\n  "should return string value",\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"filter",children:"filter"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public filter(predicate: (value: T) => boolean): Option<T>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"None"})," if the option is ",(0,a.jsx)(n.code,{children:"None"}),",\notherwise calls predicate with the wrapped value and returns:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Some(t)"})," if predicate returns ",(0,a.jsx)(n.code,{children:"true"})," (where ",(0,a.jsx)(n.code,{children:"t"})," is the wrapped value)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"None"})," if predicate returns ",(0,a.jsx)(n.code,{children:"false"})]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"examples-5",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"function is_even(n: number): boolean {\n  return n % 2 == 0;\n}\n\nassert_eq!(None.filter(is_even), None);\nassert_eq!(Some(3).filter(is_even), None);\nassert_eq!(Some(4).filter(is_even), Some(4));\n"})}),"\n",(0,a.jsx)(n.h3,{id:"flatten",children:"flatten"}),"\n",(0,a.jsx)("small",{children:"@since 0.3.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public flatten<U>(this: Option<Option<U>>): Option<U>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Converts from ",(0,a.jsx)(n.code,{children:"Option<Option<T>>"})," to ",(0,a.jsx)(n.code,{children:"Option<T>"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Flattening only removes one level of nesting at a time."}),"\n",(0,a.jsx)(n.h4,{id:"examples-6",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<Option<number>>;\n\nx = Some(Some(6));\nassert_eq!(x.flatten(), Some(6));\n\nx = Some(None);\nassert_eq!(x.flatten(), None);\n\nx = None;\nassert_eq!(x.flatten(), None);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"inspect",children:"inspect"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public inspect(f: (value: T) => void): Option<T>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Calls a function with a reference to the contained value if ",(0,a.jsx)(n.code,{children:"Some"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Returns the original option."}),"\n",(0,a.jsx)(n.h4,{id:"examples-7",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"function get<T>(arr: T[], idx: number): Option<T> {\n  const item = arr.at(idx);\n  return item !== undefined ? Some(item) : None;\n}\n\nconst list = [1, 2, 3, 4, 5];\n\nlet has_inspected = false;\n\nlet x = get(list, 2).inspect((_v) => {\n  has_inspected = true;\n});\n\nassert_eq!(x, Some(3));\nassert_eq!(has_inspected, true);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"is_none",children:"is_none"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public is_none(): boolean\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"true"})," if the option is a ",(0,a.jsx)(n.code,{children:"None"})," value."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-8",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\n\nx = Some(2);\nassert_eq!(x.is_none(), false);\n\nx = None;\nassert_eq!(x.is_none(), true);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"is_none_or",children:"is_none_or"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public is_none_or(f: (value: T) => boolean): boolean\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"true"})," if the option is a ",(0,a.jsx)(n.code,{children:"None"}),"\nor the value inside of it matches a predicate."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-9",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\n\nx = Some(2);\nassert_eq!(\n  x.is_none_or((v) => v > 1),\n  true,\n);\n\nx = Some(0);\nassert_eq!(\n  x.is_none_or((v) => v > 1),\n  false,\n);\n\nx = None;\nassert_eq!(\n  x.is_none_or((v) => v > 1),\n  true,\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"is_some",children:"is_some"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public is_some(): boolean\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"true"})," if the option is a ",(0,a.jsx)(n.code,{children:"Some"})," value."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-10",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\n\nx = Some(2);\nassert_eq!(x.is_some(), true);\n\nx = None;\nassert_eq!(x.is_some(), false);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"is_some_and",children:"is_some_and"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public is_some_and(f: (value: T) => boolean): boolean\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Checks if the ",(0,a.jsx)(n.code,{children:"Option"})," is ",(0,a.jsx)(n.code,{children:"Some"})," and the value satisfies a predicate."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-11",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\n\nx = Some(2);\nassert_eq!(\n  x.is_some_and((v) => v > 1),\n  true,\n);\n\nx = Some(0);\nassert_eq!(\n  x.is_some_and((v) => v > 1),\n  false,\n);\n\nx = None;\nassert_eq!(\n  x.is_some_and((v) => v > 1),\n  false,\n);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"map",children:"map"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public map<U>(f: (value: T) => U): Option<T | U>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Maps an ",(0,a.jsx)(n.code,{children:"Option<T>"})," to ",(0,a.jsx)(n.code,{children:"Option<U>"})," by applying a function ",(0,a.jsx)(n.code,{children:"f"}),"\nto a contained value (if ",(0,a.jsx)(n.code,{children:"Some"}),") or returns ",(0,a.jsx)(n.code,{children:"None"})," (if ",(0,a.jsx)(n.code,{children:"None"}),")."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-12",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\n\nx = Some("Hello, World!");\nassert_eq!(\n  x.map((s) => s.length),\n  Some(13),\n);\n\nx = None;\nassert_eq!(\n  x.map((s) => s.length),\n  None,\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"map_or",children:"map_or"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public map_or<U>(default_value: U, f: (value: T) => U): U\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the provided default result (if none),\nor applies a function ",(0,a.jsx)(n.code,{children:"f"})," to the contained value (if any)."]}),"\n",(0,a.jsxs)(n.p,{children:["If you are passing the result of a function call,\nit is recommended to use ",(0,a.jsx)(n.code,{children:"map_or_else"}),", which is lazily evaluated."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-13",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\n\nx = Some("foo");\nassert_eq!(\n  x.map_or(42, (v) => v.length),\n  3,\n);\n\nx = None;\nassert_eq!(\n  x.map_or(42, (v) => v.length),\n  42,\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"map_or_else",children:"map_or_else"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public map_or_else<U>(default_f: () => U, f: (value: T) => U): U\n"})}),"\n",(0,a.jsx)(n.p,{children:"Computes a default function result (if none),\nor applies a different function to the contained value (if any)."}),"\n",(0,a.jsx)(n.h4,{id:"examples-14",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'const k = 21\nlet x: Option<string>\n\nx = Some("foo")\nassert_eq!(x.map_or_else(() => 2  k, (v) => v.length), 3)\n\nx = None\nassert_eq!(x.map_or_else(() => 2  k, (v) => v.length), 42)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"or",children:"or"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public or(optb: Option<T>): Option<T>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the option if it contains a value, otherwise returns ",(0,a.jsx)(n.code,{children:"optb"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Arguments passed to or are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,a.jsx)(n.code,{children:"or_else"}),", which is lazily evaluated."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-15",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\nlet y: Option<number>;\n\nx = Some(2);\ny = None;\nassert_eq!(x.or(y), Some(2));\n\nx = None;\ny = Some(100);\nassert_eq!(x.or(y), Some(100));\n\nx = Some(2);\ny = Some(100);\nassert_eq!(x.or(y), Some(2));\n\nx = None;\ny = None;\nassert_eq!(x.or(y), None);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"or_else",children:"or_else"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public or_else(f: () => Option<T>): Option<T>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the option if it contains a value,\notherwise calls ",(0,a.jsx)(n.code,{children:"f"})," and returns the result."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-16",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\nlet y: Option<string>;\n\nx = Some("barbarians");\ny = Some("vikings");\nassert_eq!(\n  x.or_else(() => y),\n  Some("barbarians"),\n);\n\nx = None;\ny = Some("vikings");\nassert_eq!(\n  x.or_else(() => y),\n  Some("vikings"),\n);\n\nx = None;\ny = None;\nassert_eq!(\n  x.or_else(() => y),\n  None,\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"unwrap",children:"unwrap"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public unwrap(): T\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the contained ",(0,a.jsx)(n.code,{children:"Some"})," value. Panics if it is ",(0,a.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"Because this function may throw a TypeError, its use is generally discouraged.\nErrors are meant for unrecoverable errors, and do abort the entire program."}),"\n",(0,a.jsxs)(n.p,{children:["Instead, prefer to use try/catch, promise or pattern matching\nand handle the ",(0,a.jsx)(n.code,{children:"None"})," case explicitly, or call ",(0,a.jsx)(n.code,{children:"unwrap_or"})," or ",(0,a.jsx)(n.code,{children:"unwrap_or_else"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-17",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'let x: Option<string>;\n\nx = Some("air");\nassert_eq!(x.unwrap(), "air");\n\nx = None;\nassert_err!(\n  () => x.unwrap(),\n  TypeError,\n  "Called Option.unwrap() on a None value",\n);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"unwrap_or",children:"unwrap_or"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public unwrap_or(default_value: T): T\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the contained ",(0,a.jsx)(n.code,{children:"Some"})," value or a provided default value."]}),"\n",(0,a.jsxs)(n.p,{children:["Arguments passed to ",(0,a.jsx)(n.code,{children:"unwrap_or"})," are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,a.jsx)(n.code,{children:"unwrap_or_else"}),", which is lazily evaluated."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-18",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\n\nx = Some(42);\nassert_eq!(x.unwrap_or(1), 42);\n\nx = None;\nassert_eq!(x.unwrap_or(1), 1);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unwrap_or_else",children:"unwrap_or_else"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public unwrap_or_else(f: () => T): T\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns the contained ",(0,a.jsx)(n.code,{children:"Some"})," value or computes it from a closure."]}),"\n",(0,a.jsx)(n.p,{children:"Useful for expensive default computations."}),"\n",(0,a.jsx)(n.h4,{id:"examples-19",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const k = 10\nlet x: Option<number>\n\nx = Some(4)\nassert_eq!(x.unwrap_or_else(() => 2  k), 4)\n\nx = None\nassert_eq!(x.unwrap_or_else(() => 2  k), 20)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"xor",children:"xor"}),"\n",(0,a.jsx)("small",{children:"@since 0.1.0-alpha"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"public xor(optb: Option<T>): Option<T>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Returns ",(0,a.jsx)(n.code,{children:"Some"})," if exactly one of itself, ",(0,a.jsx)(n.code,{children:"optb"})," is ",(0,a.jsx)(n.code,{children:"Some"}),",\notherwise returns ",(0,a.jsx)(n.code,{children:"None"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"examples-20",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"let x: Option<number>;\nlet y: Option<number>;\n\nx = Some(2);\ny = None;\nassert_eq!(x.xor(y), Some(2));\n\nx = None;\ny = Some(100);\nassert_eq!(x.xor(y), Some(100));\n\nx = Some(2);\ny = Some(100);\nassert_eq!(x.xor(y), None);\n\nx = None;\ny = None;\nassert_eq!(x.xor(y), None);\n"})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);