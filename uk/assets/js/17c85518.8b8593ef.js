"use strict";(self.webpackChunkunwrap_or_docs=self.webpackChunkunwrap_or_docs||[]).push([[291],{3126:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>t});var r=s(8101);const l={},a=r.createContext(l);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(a.Provider,{value:n},e.children)}},5570:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"result/methods","title":"API","description":"Result is a type that represents either success (Ok) or failure (Err).","source":"@site/docs/result/api.md","sourceDirName":"result","slug":"/result/methods","permalink":"/unwrap-or/uk/result/methods","draft":false,"unlisted":false,"editUrl":"https://github.com/hnatiukr/unwrap-or/docs/docs/result/api.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"methods","slug":"methods","title":"API","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Module","permalink":"/unwrap-or/uk/result"}}');var l=s(5105),a=s(3126);const i={id:"methods",slug:"methods",title:"API",sidebar_position:2},t=void 0,d={},c=[{value:"Variants",id:"variants",level:2},{value:"Ok",id:"ok",level:3},{value:"Examples",id:"examples",level:4},{value:"Err",id:"err",level:3},{value:"Examples",id:"examples-1",level:4},{value:"Implementations",id:"implementations",level:2},{value:"and",id:"and",level:3},{value:"Examples",id:"examples-2",level:4},{value:"and_then",id:"and_then",level:3},{value:"Examples",id:"examples-3",level:4},{value:"expect",id:"expect",level:3},{value:"Examples",id:"examples-4",level:4},{value:"expect_err",id:"expect_err",level:3},{value:"Examples",id:"examples-5",level:4},{value:"inspect",id:"inspect",level:3},{value:"Examples",id:"examples-6",level:4},{value:"inspect_err",id:"inspect_err",level:3},{value:"Examples",id:"examples-7",level:4},{value:"is_err",id:"is_err",level:3},{value:"Examples",id:"examples-8",level:4},{value:"is_err_and",id:"is_err_and",level:3},{value:"Examples",id:"examples-9",level:4},{value:"is_ok",id:"is_ok",level:3},{value:"Examples",id:"examples-10",level:4},{value:"is_ok_and",id:"is_ok_and",level:3},{value:"Examples",id:"examples-11",level:4},{value:"map",id:"map",level:3},{value:"Examples",id:"examples-12",level:4},{value:"map_or",id:"map_or",level:3},{value:"Examples",id:"examples-13",level:4},{value:"map_or_else",id:"map_or_else",level:3},{value:"Examples",id:"examples-14",level:4},{value:"or",id:"or",level:3},{value:"Examples",id:"examples-15",level:4},{value:"or_else",id:"or_else",level:3},{value:"Examples",id:"examples-16",level:4},{value:"unwrap",id:"unwrap",level:3},{value:"Examples",id:"examples-17",level:4},{value:"unwrap_err",id:"unwrap_err",level:3},{value:"Examples",id:"examples-18",level:4},{value:"unwrap_or",id:"unwrap_or",level:3},{value:"Examples",id:"examples-19",level:4},{value:"unwrap_or_else",id:"unwrap_or_else",level:3},{value:"Examples",id:"examples-20",level:4}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"Result"})," is a type that represents either success ",(0,l.jsx)(n.code,{children:"(Ok)"})," or failure ",(0,l.jsx)(n.code,{children:"(Err)"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["See the ",(0,l.jsx)(n.a,{href:"/result",children:"module documentation"})," for details."]}),"\n",(0,l.jsx)(n.h2,{id:"variants",children:"Variants"}),"\n",(0,l.jsx)(n.h3,{id:"ok",children:"Ok"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"Ok(T);\n"})}),"\n",(0,l.jsx)(n.p,{children:"Contains the success value."}),"\n",(0,l.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"let x: Result<number, string> = Ok(42);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"err",children:"Err"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"Err(E);\n"})}),"\n",(0,l.jsx)(n.p,{children:"Contains the error value."}),"\n",(0,l.jsx)(n.h4,{id:"examples-1",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string> = Err("Not found");\n'})}),"\n",(0,l.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,l.jsx)(n.h3,{id:"and",children:"and"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public and<U>(res: Result<U, E>): Result<T | U, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"res"})," if the result is ",(0,l.jsx)(n.code,{children:"Ok"}),", otherwise returns the ",(0,l.jsx)(n.code,{children:"Err"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Arguments passed to and are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,l.jsx)(n.code,{children:"and_then"}),", which is lazily evaluated."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-2",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\nlet y: Result<string, string>;\n\nx = Ok(2);\ny = Err("late error");\nassert_eq!(x.and(y), Err("late error"));\n\nx = Err("early error");\ny = Ok("foo");\nassert_eq!(x.and(y), Err("early error"));\n\nx = Err("not a 2");\ny = Err("late error");\nassert_eq!(x.and(y), Err("not a 2"));\n\nx = Ok(2);\ny = Ok("different result type");\nassert_eq!(x.and(y), Ok("different result type"));\n'})}),"\n",(0,l.jsx)(n.h3,{id:"and_then",children:"and_then"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public and_then<U>(op: (value: T) => Result<U, E>): Result<T | U, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Calls ",(0,l.jsx)(n.code,{children:"op"})," if the result is ",(0,l.jsx)(n.code,{children:"Ok"}),", otherwise returns the ",(0,l.jsx)(n.code,{children:"Err"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["This function can be used for control flow based on ",(0,l.jsx)(n.code,{children:"Result"})," values."]}),"\n",(0,l.jsxs)(n.p,{children:["Often used to chain fallible operations that may return ",(0,l.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-3",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\nlet y: Result<string, string>;\n\nx = Ok(2);\ny = Err("late error");\nassert_eq!(\n  x.and_then(() => y),\n  Err("late error"),\n);\n\nx = Err("early error");\ny = Ok("foo");\nassert_eq!(\n  x.and_then(() => y),\n  Err("early error"),\n);\n\nx = Err("not a 2");\ny = Err("late error");\nassert_eq!(\n  x.and_then(() => y),\n  Err("not a 2"),\n);\n\nx = Ok(2);\ny = Ok("different result type");\nassert_eq!(\n  x.and_then(() => y),\n  Ok("different result type"),\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"expect",children:"expect"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public expect(msg: string): T\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Ok"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Because this method may throw, its use is generally discouraged.\nInstead, prefer to use pattern matching and handle the ",(0,l.jsx)(n.code,{children:"Err"})," case explicitly,\nor call ",(0,l.jsx)(n.code,{children:"unwrap_or"}),", ",(0,l.jsx)(n.code,{children:"unwrap_or_else"}),", or ",(0,l.jsx)(n.code,{children:"unwrap_or_default"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["Recommend that expect messages are used to describe the reason\nyou expect the ",(0,l.jsx)(n.code,{children:"Result"})," should be ",(0,l.jsx)(n.code,{children:"Ok"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["Panics if the value is an ",(0,l.jsx)(n.code,{children:"Err"}),",\nwith a panic message including the passed message, and the value of the ",(0,l.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-4",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(x.expect("should return 42"), 42);\n\nx = Err("unknown value");\nassert_err!(\n  () => x.expect("should return 42"),\n  \'should return 42: "unknown value"\',\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"expect_err",children:"expect_err"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public expect_err(msg: string): E\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Err"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Panics if the value is an ",(0,l.jsx)(n.code,{children:"Ok"}),", with a panic message\nincluding the passed message, and the content of the Ok."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-5",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_err!(\n  () => x.expect_err("should return unknown error value"),\n  "should return unknown error value: 42",\n);\n\nx = Err("unknown error value");\nassert_eq!(\n  x.expect_err("should return unknown error value"),\n  "unknown error value",\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inspect",children:"inspect"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public inspect(f: (value: T) => void): Result<T, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Calls a function with a reference to the contained value if ",(0,l.jsx)(n.code,{children:"Ok"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Returns the original result."}),"\n",(0,l.jsx)(n.h4,{id:"examples-6",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'function get<T>(arr: T[], idx: number): Result<T, string> {\n  const item = arr.at(idx);\n  return item !== undefined ? Ok(item) : Err("Not found");\n}\n\nconst list = [1, 2, 3, 4, 5];\n\nlet has_inspected = false;\n\nlet x = get(list, 2).inspect((_v) => {\n  has_inspected = true;\n});\n\nassert_eq!(x, Ok(3));\nassert_eq!(has_inspected, true);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"inspect_err",children:"inspect_err"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public inspect_err(f: (err: E) => void): Result<T, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Calls a function with a reference to the contained value if ",(0,l.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,l.jsx)(n.p,{children:"Returns the original result."}),"\n",(0,l.jsx)(n.h4,{id:"examples-7",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'function get<T>(arr: T[], idx: number): Result<T, string> {\n  const item = arr.at(idx);\n\n  return item !== undefined ? Ok(item) : Err("Not found");\n}\n\nconst list = [1, 2, 3, 4, 5];\n\nlet has_inspected = false;\n\nlet x = get(list, 9).inspect_err((_e) => {\n  has_inspected = true;\n});\n\nassert_eq!(x, Err("Not found"));\nassert_eq!(has_inspected, true);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"is_err",children:"is_err"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public is_err(): boolean\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"true"})," if the result is ",(0,l.jsx)(n.code,{children:"Err"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-8",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(x.is_err(), false);\n\nx = Err("Not found");\nassert_eq!(x.is_err(), true);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"is_err_and",children:"is_err_and"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public is_err_and(f: (err: E) => boolean): boolean\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"true"})," if the result is ",(0,l.jsx)(n.code,{children:"Err"})," and the value inside of it matches a predicate."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-9",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<{ html: string }, { statusCode: number }>;\n\nx = Err({ statusCode: 500 });\nassert_eq!(\n  x.is_err_and((err) => err.statusCode === 404),\n  false,\n);\n\nx = Err({ statusCode: 404 });\nassert_eq!(\n  x.is_err_and((err) => err.statusCode === 404),\n  true,\n);\n\nx = Ok({ html: "value" });\nassert_eq!(\n  x.is_err_and((err) => err.statusCode === 404),\n  false,\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"is_ok",children:"is_ok"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public is_ok(): boolean\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"true"})," if the result is ",(0,l.jsx)(n.code,{children:"Ok"}),"."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-10",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(x.is_ok(), true);\n\nx = Err("Not found");\nassert_eq!(x.is_ok(), false);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"is_ok_and",children:"is_ok_and"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public is_ok_and(f: (value: T) => boolean): boolean\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"true"})," if the result is ",(0,l.jsx)(n.code,{children:"Ok"})," and the value inside of it matches a predicate."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-11",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(0);\nassert_eq!(\n  x.is_ok_and((value) => value > 10),\n  false,\n);\n\nx = Ok(42);\nassert_eq!(\n  x.is_ok_and((value) => value > 10),\n  true,\n);\n\nx = Err("Not found");\nassert_eq!(\n  x.is_ok_and((value) => value > 10),\n  false,\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"map",children:"map"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public map<U>(f: (value: T) => U): Result<T | U, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Maps a ",(0,l.jsx)(n.code,{children:"Result<T, E>"})," to ",(0,l.jsx)(n.code,{children:"Result<U, E>"})," by applying a function\nto a contained ",(0,l.jsx)(n.code,{children:"Ok"})," value, leaving an ",(0,l.jsx)(n.code,{children:"Err"})," value untouched."]}),"\n",(0,l.jsx)(n.p,{children:"This function can be used to compose the results of two functions."}),"\n",(0,l.jsx)(n.h4,{id:"examples-12",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<string, { statusCode: number }>;\n\nx = Ok("42");\nassert_eq!(\n  x.map((value) => Number.parseInt(value, 10)),\n  Ok(42),\n);\n\nx = Err({ statusCode: 404 });\nassert_eq!(\n  x.map((value) => Number.parseInt(value, 10)),\n  Err({ statusCode: 404 }),\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"map_or",children:"map_or"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public map_or<U>(default_value: U, f: (value: T) => U): U\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the provided default (if ",(0,l.jsx)(n.code,{children:"Err"}),"),\nor applies a function to the contained value (if ",(0,l.jsx)(n.code,{children:"Ok"}),")."]}),"\n",(0,l.jsxs)(n.p,{children:["Arguments passed to ",(0,l.jsx)(n.code,{children:"map_or"})," are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,l.jsx)(n.code,{children:"map_or_else"}),", which is lazily evaluated."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-13",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<string, string>;\n\nx = Ok("foo");\nassert_eq!(\n  x.map_or(42, (v) => v.length),\n  3,\n);\n\nx = Err("bar");\nassert_eq!(\n  x.map_or(42, (v) => v.length),\n  42,\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"map_or_else",children:"map_or_else"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public map_or_else<U>(default_f: () => U, f: (value: T) => U): U\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Maps a ",(0,l.jsx)(n.code,{children:"Result<T, E>"})," to ",(0,l.jsx)(n.code,{children:"U"})," by applying fallback function ",(0,l.jsx)(n.code,{children:"default_f"}),"\nto a contained ",(0,l.jsx)(n.code,{children:"Err"})," value, or function ",(0,l.jsx)(n.code,{children:"f"})," to a contained ",(0,l.jsx)(n.code,{children:"Ok"})," value."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-14",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'const k = 21\nlet x: Result<string, string>\n\nx = Ok("foo")\nassert_eq!(\n    x.map_or_else(\n    () => 2  k,\n    (v) => v.length,\n    ),\n    3,\n)\n\nx = Err("bar")\nassert_eq!(\n    x.map_or_else(\n    () => 2  k,\n    (v) => v.length,\n    ),\n    42,\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"or",children:"or"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public or(res: Result<T, E>): Result<T, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns ",(0,l.jsx)(n.code,{children:"res"})," if the result is ",(0,l.jsx)(n.code,{children:"Err"}),", otherwise returns the ",(0,l.jsx)(n.code,{children:"Ok"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Arguments passed to or are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,l.jsx)(n.code,{children:"or_else"}),", which is lazily evaluated."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-15",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\nlet y: Result<number, string>;\n\nx = Ok(2);\ny = Err("Not found");\nassert_eq!(x.or(y), Ok(2));\n\nx = Err("Not found");\ny = Ok(100);\nassert_eq!(x.or(y), Ok(100));\n\nx = Ok(2);\ny = Ok(100);\nassert_eq!(x.or(y), Ok(2));\n\nx = Err("Not found");\ny = Err("Not found");\nassert_eq!(x.or(y), Err("Not found"));\n'})}),"\n",(0,l.jsx)(n.h3,{id:"or_else",children:"or_else"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public or_else(f: () => Result<T, E>): Result<T, E>\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Calls ",(0,l.jsx)(n.code,{children:"f"})," if the result is ",(0,l.jsx)(n.code,{children:"Err"}),", otherwise returns the ",(0,l.jsx)(n.code,{children:"Ok"})," value."]}),"\n",(0,l.jsx)(n.p,{children:"This function can be used for control flow based on result values."}),"\n",(0,l.jsx)(n.h4,{id:"examples-16",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<string, { statusCode: number }>;\nlet y: Result<string, { statusCode: number }>;\n\nx = Ok("barbarians");\ny = Ok("vikings");\nassert_eq!(\n  x.or_else(() => y),\n  Ok("barbarians"),\n);\n\nx = Err({ statusCode: 404 });\ny = Ok("vikings");\nassert_eq!(\n  x.or_else(() => y),\n  Ok("vikings"),\n);\n\nx = Err({ statusCode: 404 });\ny = Err({ statusCode: 404 });\nassert_eq!(\n  x.or_else(() => y),\n  Err({ statusCode: 404 }),\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"unwrap",children:"unwrap"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public unwrap(): T\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Ok"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Because this function may throw, its use is generally discouraged.\nPrefer to call inside ",(0,l.jsx)(n.code,{children:"try/catch"})," statement, or handle the ",(0,l.jsx)(n.code,{children:"Err"})," case explicitly,\nor call ",(0,l.jsx)(n.code,{children:"unwrap_or"}),", ",(0,l.jsx)(n.code,{children:"unwrap_or_else"}),", or ",(0,l.jsx)(n.code,{children:"unwrap_or_default"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["Panics if the value is an ",(0,l.jsx)(n.code,{children:"Err"}),", with a message provided by the ",(0,l.jsx)(n.code,{children:"Err"}),"\u2019s value."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-17",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(x.unwrap(), 42);\n\nx = Err("Not found");\nassert_err!(\n  () => x.unwrap(),\n  TypeError,\n  "Called Result.unwrap() on an Err(E) value",\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"unwrap_err",children:"unwrap_err"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public unwrap_err(): E\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Err"})," value."]}),"\n",(0,l.jsxs)(n.p,{children:["Panics if the value is an ",(0,l.jsx)(n.code,{children:"Ok"}),", with a custom panic message provided by the ",(0,l.jsx)(n.code,{children:"Ok"}),"\u2019s value."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-18",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_err!(\n  () => x.unwrap_err(),\n  TypeError,\n  "Called Result.unwrap_err() on an Ok value",\n);\n\nx = Err("Not found");\nassert_eq!(x.unwrap_err(), "Not found");\n'})}),"\n",(0,l.jsx)(n.h3,{id:"unwrap_or",children:"unwrap_or"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public unwrap_or(default_value: T): T\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Ok"})," value or a provided default."]}),"\n",(0,l.jsxs)(n.p,{children:["Arguments passed to ",(0,l.jsx)(n.code,{children:"unwrap_or"})," are eagerly evaluated;\nif you are passing the result of a function call,\nit is recommended to use ",(0,l.jsx)(n.code,{children:"unwrap_or_else"}),", which is lazily evaluated."]}),"\n",(0,l.jsx)(n.h4,{id:"examples-19",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(x.unwrap_or(0), 42);\n\nx = Err("Not found");\nassert_eq!(x.unwrap_or(0), 0);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"unwrap_or_else",children:"unwrap_or_else"}),"\n",(0,l.jsx)("small",{children:"@since 0.4.0-alpha"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"public unwrap_or_else(f: (err: E) => T): T\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Returns the contained ",(0,l.jsx)(n.code,{children:"Ok"})," value or computes it from a closure."]}),"\n",(0,l.jsx)(n.p,{children:"Useful for expensive default computations."}),"\n",(0,l.jsx)(n.h4,{id:"examples-20",children:"Examples"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:'let x: Result<number, string>;\n\nx = Ok(42);\nassert_eq!(\n  x.unwrap_or_else((err) => err.length),\n  42,\n);\n\nx = Err("foo");\nassert_eq!(\n  x.unwrap_or_else((err) => err.length),\n  3,\n);\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);